library(ggplot2)
#--------------------------------------------------------------------------------------------
#Note : because MCMC is a probabilistic methods, methods may (slightly) vary over estimations
#--------------------------------------------------------------------------------------------
#Christopher Hill, June 2017
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run1.RData"))
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run2.RData"))
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run1.RData"))
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run2.RData"))
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
#Combine both runs and bind data
kappa_yee_vertex = (chainsVertex1[,"kappa_yee.mu"] + chainsVertex2[,"kappa_yee.mu"])/2
kappa_yee_rTPJ = (chainsrTPJ1 [,"kappa_yee.mu"] + chainsrTPJ2[,"kappa_yee.mu"])/2
#Get histogram
hs1 = data.frame(hists = c(kappa_yee_vertex), Condition = factor(c(rep("cond1",1000*3))))
hs2 = data.frame(hists = c(kappa_yee_rTPJ), Condition = factor(c(rep("cond2",1000*3))))
v = c(kappa_yee_vertex, kappa_yee_rTPJ)
c = factor(c(rep("cond1",1000*3),rep("cond2",1000*3)))
hsall = data.frame(v,c)
Figure2_C = ggplot(hsall, aes(x=v, fill=c))+geom_density(alpha=.7, size=1) + xlim(0,0.15) +
scale_fill_manual(values=c("#0078dc", "Red")) +
theme_classic() +
theme(axis.title=element_text(size=10)) + theme(axis.text=element_text(size=10,face = "bold")) +
ylab("Posterior density") + xlab(expression(kappa~'parameter')) +
theme(legend.position="none")+theme(axis.text=element_text(size = 43,face = "bold"))+theme(axis.title=element_text(size = 47,face = "bold"))
#Perform inference on the difference for the population-level distribution of Kappa for cTBS-rTPJ and cTBS-vertex
#----------------------------------------------------------------------------------------------------------------
#Get the approximated mcmc p-value, multiply by 2 for two-tail.
p_value = mean((kappa_yee_rTPJ-kappa_yee_vertex)>0)*2
print(p_value)
Figure2_C
WD
library(ggplot2)
#--------------------------------------------------------------------------------------------
#Note : because MCMC is a probabilistic methods, methods may (slightly) vary over estimations
#--------------------------------------------------------------------------------------------
#Christopher Hill, June 2017
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run1.RData"))
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run2.RData"))
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run1.RData"))
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run2.RData"))
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
#Combine both runs and bind data
kappa_yee_vertex = (chainsVertex1[,"kappa_yee.mu"] + chainsVertex2[,"kappa_yee.mu"])/2
kappa_yee_rTPJ = (chainsrTPJ1 [,"kappa_yee.mu"] + chainsrTPJ2[,"kappa_yee.mu"])/2
#Get histogram
hs1 = data.frame(hists = c(kappa_yee_vertex), Condition = factor(c(rep("cond1",1000*3))))
hs2 = data.frame(hists = c(kappa_yee_rTPJ), Condition = factor(c(rep("cond2",1000*3))))
v = c(kappa_yee_vertex, kappa_yee_rTPJ)
c = factor(c(rep("cond1",1000*3),rep("cond2",1000*3)))
hsall = data.frame(v,c)
Figure2_C = ggplot(hsall, aes(x=v, fill=c))+geom_density(alpha=.7, size=1) + xlim(0,0.15) +
scale_fill_manual(values=c("#0078dc", "Red")) +
theme_classic() +
theme(axis.title=element_text(size=10)) + theme(axis.text=element_text(size=10,face = "bold")) +
ylab("Posterior density") + xlab(expression(kappa~'parameter')) +
theme(legend.position="none")+theme(axis.text=element_text(size = 43,face = "bold"))+theme(axis.title=element_text(size = 47,face = "bold"))
#Perform inference on the difference for the population-level distribution of Kappa for cTBS-rTPJ and cTBS-vertex
#----------------------------------------------------------------------------------------------------------------
#Get the approximated mcmc p-value, multiply by 2 for two-tail.
p_value = mean((kappa_yee_rTPJ-kappa_yee_vertex)>0)*2
print(p_value)
Figure2_C
#--------------------------------------------------------------------------------------------
#Note : because MCMC is a probabilistic methods, methods may (slightly) vary over estimations
#--------------------------------------------------------------------------------------------
#Christopher Hill, June 2017
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run1.RData"))
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run2.RData"))
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run1.RData"))
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rTPJ_run2.RData"))
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
file.path(WD,"data/Processed_data/Influence_model_params/results_Vertex_run1.RData")
#You will need to install JAGS and then rJAGS on your computer.
#https://cran.r-project.org/web/packages/rjags/rjags.pdf
#Christopher Hill, June 2017. For questions: Christoph.hill0@gmail.com
#---------------------------------------------------------------------
library(runjags)
library(R.matlab)
#-----------------------------------------------------------------------------------------
#-----------------------------DEFINE VARIABLES--------------------------------------------
#-----------------------------------------------------------------------------------------
#Select the model you wish to estimate
#--------------------------------------
Model = 'rJAGS_InfluenceLearning'
#--------------------------------------
#Select the parameters you want to monitor
#-------------------------------------------------------------------------------------------------------------------------
#This depends on the model you are using. Check the models.txt files to see what's possible. This is for InfluenceLearning
Monitor = c("eta_yee.mu", "eta_yee.kappa", "kappa_yee.mu", "kappa_yee.kappa", "beta_yee.mu", "beta_yee.kappa","deviance")
#-------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------
#Select how many burnin. The greater the number, the more precise the estimates but slower.
#(Results presented in the paper use 50'000 burnin). This may take hours/days depending on computer
#--------------------------------------------------------------------------------------------------
nburnin = 50000
#-----------------------------------------------------------------------------------------
#-------------------------RUN ESTIMATION AND SAVE-----------------------------------------
#-----------------------------------------------------------------------------------------
#Condition sub-paths
CondPath = list('cTBS-vertex','cTBS-rTPJ')
#Get full data path
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
ModelPath <- file.path('rJAGS_models',Model)
SavePath <- file.path(WD[1],'data/Processed_data/Influence_model_params')
for (COND in 1:2){ #Loop over conditions
DataPath <- file.path(WD[1],'data/Raw_data',unlist(CondPath[COND]),'rJAGS/rJAGSmat.mat')
print(DataPath)
for (Sess in 1:2){ #Loop over sessions
#Select the data matrices
#------------------------------------------------------
aux = readMat(DataPath)
listNames = names(aux)
choices_yee_r1 = aux[[listNames]][[Sess]][1][[1]]
choices_yer_r1 = aux[[listNames]][[Sess]][2][[1]]
choices_yee = choices_yee_r1[,2:dim(choices_yee_r1)[2]]
choices_yer = choices_yer_r1[,2:dim(choices_yer_r1)[2]]
#------------------------------------------------------
#Insert the matrices in an rJAGS-compatible data structure
dat <- dump.format(list(
choices_yee = choices_yee
, choices_yer = choices_yer
, T = dim(choices_yee)[1]
, S = dim(choices_yee)[2]
))
#We use three chains to ensure to make sure we converge with the chains
#If the PrFs (Gelman-Rubin criterion) are below 1.05, this confirms chain convergence. We use three different rnd generators as an extra layer of caution
inits1 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Super-Duper", .RNG.seed=999 ))
inits2 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Wichmann-Hill", .RNG.seed=666 ))
inits3 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
#Run the model with the chains
results <- run.jags(model=ModelPath, monitor=Monitor,data=dat, n.chains=3, inits=c(inits1,inits2, inits3), plots = FALSE, method="parallel", module=c("dic"), burnin=nburnin, sample=1000, thin=nburnin/1000)
#Save the outputs of the monitor into the Processed_data sub-folder
#-------------------------------------------------------------------
SaveName = paste('results_',Model,'_',CondPath[COND],'_R',as.character(Sess),'.Rdata',sep="")[1]
save(results, file=file.path(SavePath,SaveName))
print(SaveName)
print(results)
}
}
library(ggplot2)
#--------------------------------------------------------------------------------------------
#Note : because MCMC is a probabilistic methods, methods may (slightly) vary over estimations
#--------------------------------------------------------------------------------------------
#Christopher Hill, June 2017
#These results have been estimated with the script "Get_ModelEstimates.R" in source/Get_processed_data/Computational_modeling
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R1.RDATA"))
print(results)
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R2.RDATA"))
print(results)
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R1.RDATA"))
print(results$summaries)
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R2.RDATA"))
print(results$summaries)
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
#Combine both runs and bind data
kappa_yee_vertex = (chainsVertex1[,"kappa_yee.mu"] + chainsVertex2[,"kappa_yee.mu"])/2
kappa_yee_rTPJ = (chainsrTPJ1 [,"kappa_yee.mu"] + chainsrTPJ2[,"kappa_yee.mu"])/2
#Get histogram
hs1 = data.frame(hists = c(kappa_yee_vertex), Condition = factor(c(rep("cond1",1000*3))))
hs2 = data.frame(hists = c(kappa_yee_rTPJ), Condition = factor(c(rep("cond2",1000*3))))
v = c(kappa_yee_vertex, kappa_yee_rTPJ)
c = factor(c(rep("cond1",1000*3),rep("cond2",1000*3)))
hsall = data.frame(v,c)
Figure2_C = ggplot(hsall, aes(x=v, fill=c))+geom_density(alpha=.7, size=1) + xlim(0,0.15) +
scale_fill_manual(values=c("#0078dc", "Red")) +
theme_classic() +
theme(axis.title=element_text(size=10)) + theme(axis.text=element_text(size=10,face = "bold")) +
ylab("Posterior density") + xlab(expression(kappa~'parameter')) +
theme(legend.position="none")+theme(axis.text=element_text(size = 43,face = "bold"))+theme(axis.title=element_text(size = 47,face = "bold"))
#Perform inference on the difference for the population-level distribution of Kappa for cTBS-rTPJ and cTBS-vertex
#----------------------------------------------------------------------------------------------------------------
#Get the approximated mcmc p-value, multiply by 2 for two-tail.
p_value = mean((kappa_yee_rTPJ-kappa_yee_vertex)>0)*2
print(p_value)
Figure2_C
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R1.RDATA"))
print(results)
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R2.RDATA"))
print(results)
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R1.RDATA"))
print(results$summaries)
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R2.RDATA"))
print(results$summaries)
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
#Load the Datasets containing the chains
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R1.RDATA"))
print(results)
chainsVertex1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-vertex_R2.RDATA"))
print(results)
chainsVertex2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R1.RDATA"))
print(results$summaries)
chainsrTPJ1 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
load(file.path(WD,"data/Processed_data/Influence_model_params/results_rJAGS_InfluenceLearning_cTBS-rTPJ_R2.RDATA"))
print(results$summaries)
chainsrTPJ2 = rbind(results$mcmc[[1]], results$mcmc[[2]], results$mcmc[[3]])
#You will need to install JAGS and then rJAGS on your computer.
#https://cran.r-project.org/web/packages/rjags/rjags.pdf
#Christopher Hill, June 2017. For questions: Christoph.hill0@gmail.com
#---------------------------------------------------------------------
library(runjags)
library(R.matlab)
#-----------------------------------------------------------------------------------------
#-----------------------------DEFINE VARIABLES--------------------------------------------
#-----------------------------------------------------------------------------------------
#Select the model you wish to estimate
#--------------------------------------
Model = 'rJAGS_InfluenceLearning'
#--------------------------------------
#Select the parameters you want to monitor
#-------------------------------------------------------------------------------------------------------------------------
#This depends on the model you are using. Check the models.txt files to see what's possible. This is for InfluenceLearning
Monitor = c("eta_yee.mu", "eta_yee.kappa", "kappa_yee.mu", "kappa_yee.kappa", "beta_yee.mu", "beta_yee.kappa","deviance")
#-------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------
#Select how many burnin. The greater the number, the more precise the estimates but slower.
#(Results presented in the paper use 50'000 burnin). This may take hours/days depending on computer
#--------------------------------------------------------------------------------------------------
nburnin = 100000
#-----------------------------------------------------------------------------------------
#-------------------------RUN ESTIMATION AND SAVE-----------------------------------------
#-----------------------------------------------------------------------------------------
#Condition sub-paths
CondPath = list('cTBS-vertex','cTBS-rTPJ')
#Get full data path
WD <- getwd()
WD = unlist(strsplit(WD, split='/source', fixed=TRUE))
ModelPath <- file.path('rJAGS_models',Model)
SavePath <- file.path(WD[1],'data/Processed_data/Influence_model_params')
for (COND in 1:2){ #Loop over conditions
DataPath <- file.path(WD[1],'data/Raw_data',unlist(CondPath[COND]),'rJAGS/rJAGSmat.mat')
print(DataPath)
for (Sess in 1:2){ #Loop over sessions
#Select the data matrices
#------------------------------------------------------
aux = readMat(DataPath)
listNames = names(aux)
choices_yee_r1 = aux[[listNames]][[Sess]][1][[1]]
choices_yer_r1 = aux[[listNames]][[Sess]][2][[1]]
choices_yee = choices_yee_r1[,2:dim(choices_yee_r1)[2]]
choices_yer = choices_yer_r1[,2:dim(choices_yer_r1)[2]]
#------------------------------------------------------
#Insert the matrices in an rJAGS-compatible data structure
dat <- dump.format(list(
choices_yee = choices_yee
, choices_yer = choices_yer
, T = dim(choices_yee)[1]
, S = dim(choices_yee)[2]
))
#We use three chains to ensure to make sure we converge with the chains
#If the PrFs (Gelman-Rubin criterion) are below 1.05, this confirms chain convergence. We use three different rnd generators as an extra layer of caution
inits1 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Super-Duper", .RNG.seed=999 ))
inits2 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Wichmann-Hill", .RNG.seed=666 ))
inits3 <- dump.format(list(eta_yee.mu=0.1, eta_yee.kappa=10, kappa_yee.mu=0.1, kappa_yee.kappa=10, beta_yee.mu=0.1, beta_yee.kappa=10, .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
#Run the model with the chains
results <- run.jags(model=ModelPath, monitor=Monitor,data=dat, n.chains=3, inits=c(inits1,inits2, inits3), plots = FALSE, method="parallel", module=c("dic"), burnin=nburnin, sample=1000, thin=nburnin/1000)
#Save the outputs of the monitor into the Processed_data sub-folder
#-------------------------------------------------------------------
SaveName = paste('results_',Model,'_',CondPath[COND],'_R',as.character(Sess),'.Rdata',sep="")[1]
save(results, file=file.path(SavePath,SaveName))
print(SaveName)
print(results)
}
}
